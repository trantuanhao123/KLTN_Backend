const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const UserModel = require("../models/user");

async function register({ email, phone, password, fullname }) {
  const existingUser = await UserModel.findByEmail(email);
  if (existingUser) throw new Error("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω");

  const passwordHash = await bcrypt.hash(password, 10);
  const userId = await UserModel.create({
    email,
    phone,
    passwordHash,
    fullname,
  });

  return { userId, email };
}

async function login({ email, password }) {
  const user = await UserModel.findByEmail(email);
  if (!user) throw new Error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u");

  const valid = await bcrypt.compare(password, user.PASSWORD_HASH);
  if (!valid) throw new Error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u");

  const token = jwt.sign(
    { userId: user.USER_ID, role: user.ROLE },
    process.env.JWT_SECRET || "khongdoanduocdau",
    { expiresIn: process.env.JWT_EXPIRES_IN || "1h" }
  );

  return { token, user };
}

async function loginAdmin({ email, password }) {
  // 1. T√¨m ng∆∞·ªùi d√πng b·∫±ng email
  const user = await UserModel.findByEmail(email);

  // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
  if (!user) throw new Error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u");

  // 2. So s√°nh m·∫≠t kh·∫©u
  const valid = await bcrypt.compare(password, user.PASSWORD_HASH);
  if (!valid) throw new Error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u");

  // 3. KI·ªÇM TRA VAI TR√í ƒê·∫∂C BI·ªÜT
  if (user.ROLE !== "ADMIN") {
    throw new Error("T·ª´ ch·ªëi truy c·∫≠p. Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i qu·∫£n tr·ªã vi√™n");
  }

  const token = jwt.sign(
    { userId: user.USER_ID, role: user.ROLE },
    process.env.JWT_SECRET || "khongdoanduocdau",
    { expiresIn: process.env.JWT_EXPIRES_IN || "1h" }
  );

  // 4. ƒêƒÉng nh·∫≠p th√†nh c√¥ng, tr·∫£ v·ªÅ th√¥ng tin Admin
  return {
    user: {
      USER_ID: user.USER_ID,
      EMAIL: user.EMAIL,
      FULLNAME: user.FULLNAME,
      ROLE: user.ROLE,
    },
    token,
  };
}
// üÜï L·∫•y danh s√°ch ng∆∞·ªùi d√πng
async function getAllUsers() {
  const users = await UserModel.getAll();
  return users;
}

// üÜï L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
async function getUserById(userId) {
  const user = await UserModel.findById(userId);
  if (!user || user.IS_DELETED) throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
  return user;
}

// üÜï C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
async function updateUser(userId, updateData) {
  const affected = await UserModel.update(userId, updateData);
  if (!affected) throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng");
  return await UserModel.findById(userId);
}

// üÜï X√≥a ng∆∞·ªùi d√πng (soft delete)
async function deleteUser(userId) {
  const affected = await UserModel.deleteById(userId);
  if (!affected) throw new Error("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng");
  return true;
}

async function reActiveUser(userId) {
  const affected = await UserModel.reActiveById(userId);
  if (!affected) throw new Error("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng");
  return true;
}
// üÜï X√°c minh t√†i kho·∫£n (VERIFIED = 1)
async function verifyUser(userId) {
  const affected = await UserModel.verifyUser(userId);
  if (!affected) throw new Error("Kh√¥ng th·ªÉ x√°c minh ng∆∞·ªùi d√πng");
  return await UserModel.findById(userId);
}

module.exports = {
  register,
  login,
  loginAdmin,
  getAllUsers,
  getUserById,
  updateUser,
  deleteUser,
  verifyUser,
  reActiveUser,
};
