const { PayOS } = require("@payos/node");
const paymentModel = require("../models/payment");

const payos = new PayOS(
  process.env.PAYOS_CLIENT_ID,
  process.env.PAYOS_API_KEY,
  process.env.PAYOS_CHECKSUM_KEY
);

// üü© T·∫°o link thanh to√°n PayOS
async function createPayment(data) {
  if (!data.orderId || !data.amount)
    throw new Error("Thi·∫øu orderId ho·∫∑c amount");

  const order = {
    amount: data.amount,
    orderCode: data.orderId, // üî• Quan tr·ªçng: mapping ORDER_ID sang PayOS orderCode
    description:
      data.description || `Thanh to√°n thu√™ xe - M√£ ƒë∆°n ${data.orderId}`,
    cancelUrl: "http://localhost:5173/payment/cancel",
    returnUrl: "http://localhost:5173/payment/success",
  };

  const paymentLink = await payos.paymentRequests.create(order);
  console.log("‚úÖ T·∫°o link thanh to√°n cho ƒë∆°n:", data.orderId);
  return paymentLink.checkoutUrl;
}

// üü¶ X·ª≠ l√Ω webhook t·ª´ PayOS
async function handleWebhook(body) {
  console.log("Webhook data:", body);

  // D·ªØ li·ªáu th·ª±c n·∫±m trong body.data
  const data = body.data;
  if (!data || !data.orderCode) {
    console.warn("‚ö†Ô∏è Kh√¥ng c√≥ orderCode trong webhook");
    return { success: false, message: "Invalid data" };
  }

  // Ki·ªÉm tra m√£ code
  if (data.code === "00" || body.code === "00" || data.desc === "success") {
    const orderId = data.orderCode; // ‚úÖ ch√≠nh l√† ORDER_ID
    console.log("‚úÖ Thanh to√°n th√†nh c√¥ng cho ƒë∆°n:", orderId);

    // L∆∞u l·ªãch s·ª≠ thanh to√°n
    await paymentModel.insertPayment({
      ORDER_ID: orderId,
      AMOUNT: data.amount,
      METHOD: "PayOS",
      STATUS: "SUCCESS",
      TRANSACTION_CODE: data.reference,
      TRANSACTION_DATE: data.transactionDateTime,
    });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu√™
    await paymentModel.updateOrderStatus(orderId, "CONFIRMED", 1);
  } else {
    console.log("‚ùå Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.");
  }

  return { success: true };
}

module.exports = { createPayment, handleWebhook };
